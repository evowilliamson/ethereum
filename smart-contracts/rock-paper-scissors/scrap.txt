alice: 0xca35b7d915458ef540ade6068dfe2f44e8fa733c

carol: 0x14723a09acff6d2a60dcdf7aa4aff308fddc160c
password carol: password1
password bob: password2

bob: 0x4b0897b0513fdc7c541b6d9d7e929c4e5364d2db

"password1", "password2"
remittance hash: 0x0f1faeee93a30346dd7f45f531d6dbc7ddba55cea001dd0099b4e14ae6a54869

0x75a03df79d52893604032d017944a2fa9b63ccf6b3036cc30a4bb0a5d1aa4057


 describe("Withdrawing", function() {

    it("should allow the withdrawl of " + totalAmount + " from  Remittance contract", function() {
      let balanceBefore;
      let txObj;
      remittanceHash = web3Utils.keccak256(carol + web3Utils.toHex(passwordCarol) + 
          web3Utils.toHex(passwordBob));
      return remittance.sendMoney(remittanceHash, daysClaim,
          {from: carol, value: totalAmount, gasPrice: gasPrice})
      .then(function () {
        return web3.eth.getBalancePromise(carol);
      }).then(function (balance) {
        balanceBefore = balance;
        return remittance.withdrawal(passwordCarol, passwordBob, {from: carol, 
          value: totalAmount, gasPrice: gasPrice});
      }).then(function (_txObj) {
        txObj = _txObj
        assert.strictEqual(txObj.logs[0].event, "MoneyWithdrawnBy");
        assert.strictEqual(txObj.logs[0].args.receiver, carol);
        return web3.eth.getBalancePromise(carol);
      }).then(function (balance) {
        balanceAfter = balance;
        assert.strictEqual(
          new BigNumber(balanceBefore).plus(new BigNumber(totalAmount)).toString(10), 
          new BigNumber(balanceAfter).plus(new BigNumber(getGasUsedInWei(txObj))).toString(10), 
          "Benifciary did not withdraw " + splitAmount.toString(10));
      });
    });

  });


Remittance.new({ from: carol }).then(instance => remittance = instance);
remittanceHash = web3Utils.keccak256(carol + web3Utils.toHex(passwordCarol) + web3Utils.toHex(passwordBob));
remittance.sendMoney(remittanceHash, daysClaim, {from: alice, value: totalAmount, gasPrice: gasPrice})
remittance.withdraw(passwordCarol, passwordBob, {from: carol, value: totalAmount, gasPrice: gasPrice});


remittanceHash = web3Utils.keccak256("14723a09acff6d2a60dcdf7aa4aff308fddc160c" + web3Utils.toHex("p1") + web3Utils.toHex("p2"), {encoding:"hex"});
remittanceHash = web3Utils.keccak256(carol + "p1" + "p2");
remittanceHash = web3Utils.keccak256("0x14723a09acff6d2a60dcdf7aa4aff308fddc160c" + "p1" + "p2");
0xabfd07f92ea6a855e3c59612c7f78ac79e208e497d0bb6a6bfa29aff81c4a9fe



abi.soliditySHA3([ "string", "string", "address" ],[ "p1", "p2", new BN("14723a09acff6d2a60dcdf7aa4aff308fddc160c", 16)]).toString('hex')


Carol address:
0x14723A09ACFF6D2A60DCDF7AA4AFF308FDDC160C





  // describe("Transferring profit", () => {

  //   it("should allow the transferral of profit by profit benificiary", () =>
  //     rockPaperScissors.invite(invitee, secondsToDeadline, gameId, 
  //       {from: inviter, gasPrice: gasPrice, value: moneyAtStake})
  //       .then( () =>
  //         rockPaperScissors.accept(gameId, move.Rock.value, 
  //           {from: invitee, gasPrice: gasPrice, value: moneyAtStake}))
  //       .then( () =>
  //         rockPaperScissors.revealMove(move.Rock.value, passwordInviter, gameId,  
  //           {from: inviter, gasPrice: gasPrice}))
  //       .then( () =>
  //           rockPaperScissors.deactivate({ from: owner }))
  //       .then( () => 
  //         rockPaperScissors.transferProfits({from: owner, gasPrice: gasPrice}))
  //       .then( (txObj) => {
  //         assert.strictEqual(txObj.logs[0].event, "ProfitTransferred");
  //         assert.strictEqual(txObj.logs[0].args.toWhere, owner);
  //         return getContractBalance()})
  //       .then( (balance) => 
  //         assert.strictEqual(balance.toString(10), "ProfitTransferred"))

  //   );

  //   it("should not allow the transferral of profit by person other than profit benificiary", () =>
  //     rockPaperScissors.invite(invitee, secondsToDeadline, gameId, 
  //       {from: inviter, gasPrice: gasPrice, value: moneyAtStake})
  //       .then( () =>
  //         rockPaperScissors.accept(gameId, move.Rock.value, 
  //           {from: invitee, gasPrice: gasPrice, value: moneyAtStake}))
  //       .then( () =>
  //         rockPaperScissors.revealMove(move.Rock.value, passwordInviter, gameId,  
  //           {from: inviter, gasPrice: gasPrice}))
  //       .then( () =>
  //           rockPaperScissors.deactivate({ from: owner }))
  //       .then( () =>
  //         expectedExceptionPromise( () =>
  //           rockPaperScissors.transferProfits({from: invitee, gasPrice: gasPrice})))
  //   );

  // });
